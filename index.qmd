---
title: "DSA306 Group Project: Group 7"
---

# Project Introduction

## Problem Statement

In recent years, the escalating frequency of car accidents has become a critical concern for both public safety and economic stability. 

According to the World Health Organization, road traffic injuries are a leading cause of death globally, with millions of lives lost and countless others suffering from varying degrees of injury and trauma each year. 

We aim to better understand the factors that contribute to the severity of car accidents as we believe that it is paramount in creating safer traffic conditions for all.

## Project Objectives

This project aims to leverage the power of big data to develop a model for predicting the severity of car accidents. 

By analyzing a comprehensive dataset comprising of a wide range of variables including weather conditions, presence of certain traffic management signs or items, date and time of accidents, we seek to uncover the underlying patterns and relationships that influence the severity of accidents.

# Dataset Introduction

| \#  |       Attribute       | Description                                                                                                                                                                                                                     | Nullable |
|:---:|:-----------------:|:------------------------------------------------|:-------:|
|  1  |          ID           | This is a unique identifier of the accident record.                                                                                                                                                                             |    No    |
|  2  |       Severity        | Shows the severity of the accident, a number between 1 and 4, where 1 indicates the least impact on traffic (i.e., short delay as a result of the accident) and 4 indicates a significant impact on traffic (i.e., long delay). |    No    |
|  3  |      Start_Time       | Shows start time of the accident in local time zone.                                                                                                                                                                            |    No    |
|  4  |       End_Time        | Shows end time of the accident in local time zone. End time here refers to when the impact of accident on traffic flow was dismissed.                                                                                           |    No    |
|  5  |       Start_Lat       | Shows latitude in GPS coordinate of the start point.                                                                                                                                                                            |    No    |
|  6  |       Start_Lng       | Shows longitude in GPS coordinate of the start point.                                                                                                                                                                           |    No    |
|  7  |        End_Lat        | Shows latitude in GPS coordinate of the end point.                                                                                                                                                                              |   Yes    |
|  8  |        End_Lng        | Shows longitude in GPS coordinate of the end point.                                                                                                                                                                             |   Yes    |
|  9  |     Distance(mi)      | The length of the road extent affected by the accident.                                                                                                                                                                         |    No    |
| 10  |      Description      | Shows natural language description of the accident.                                                                                                                                                                             |    No    |
| 11  |        Number         | Shows the street number in address field.                                                                                                                                                                                       |   Yes    |
| 12  |        Street         | Shows the street name in address field.                                                                                                                                                                                         |   Yes    |
| 13  |         Side          | Shows the relative side of the street (Right/Left) in address field.                                                                                                                                                            |   Yes    |
| 14  |         City          | Shows the city in address field.                                                                                                                                                                                                |   Yes    |
| 15  |        County         | Shows the county in address field.                                                                                                                                                                                              |   Yes    |
| 16  |         State         | Shows the state in address field.                                                                                                                                                                                               |   Yes    |
| 17  |        Zipcode        | Shows the zipcode in address field.                                                                                                                                                                                             |   Yes    |
| 18  |        Country        | Shows the country in address field.                                                                                                                                                                                             |   Yes    |
| 19  |       Timezone        | Shows timezone based on the location of the accident (eastern, central, etc.).                                                                                                                                                  |   Yes    |
| 20  |     Airport_Code      | Denotes an airport-based weather station which is the closest one to location of the accident.                                                                                                                                  |   Yes    |
| 21  |   Weather_Timestamp   | Shows the time-stamp of weather observation record (in local time).                                                                                                                                                             |   Yes    |
| 22  |    Temperature(F)     | Shows the temperature (in Fahrenheit).                                                                                                                                                                                          |   Yes    |
| 23  |     Wind_Chill(F)     | Shows the wind chill (in Fahrenheit).                                                                                                                                                                                           |   Yes    |
| 24  |      Humidity(%)      | Shows the humidity (in percentage).                                                                                                                                                                                             |   Yes    |
| 25  |     Pressure(in)      | Shows the air pressure (in inches).                                                                                                                                                                                             |   Yes    |
| 26  |    Visibility(mi)     | Shows visibility (in miles).                                                                                                                                                                                                    |   Yes    |
| 27  |    Wind_Direction     | Shows wind direction.                                                                                                                                                                                                           |   Yes    |
| 28  |    Wind_Speed(mph)    | Shows wind speed (in miles per hour).                                                                                                                                                                                           |   Yes    |
| 29  |   Precipitation(in)   | Shows precipitation amount in inches, if there is any.                                                                                                                                                                          |   Yes    |
| 30  |   Weather_Condition   | Shows the weather condition (rain, snow, thunderstorm, fog, etc.)                                                                                                                                                               |   Yes    |
| 31  |        Amenity        | A [POI](https://wiki.openstreetmap.org/wiki/Points_of_interest) annotation which indicates presence of [amenity](https://wiki.openstreetmap.org/wiki/Key:amenity) in a nearby location.                                         |    No    |
| 32  |         Bump          | A POI annotation which indicates presence of speed bump or hump in a nearby location.                                                                                                                                           |    No    |
| 33  |       Crossing        | A POI annotation which indicates presence of [crossing](https://wiki.openstreetmap.org/wiki/Key:crossing) in a nearby location.                                                                                                 |    No    |
| 34  |       Give_Way        | A POI annotation which indicates presence of [give_way](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dgive_way) in a nearby location.                                                                                       |    No    |
| 35  |       Junction        | A POI annotation which indicates presence of [junction](https://wiki.openstreetmap.org/wiki/Key:junction) in a nearby location.                                                                                                 |    No    |
| 36  |        No_Exit        | A POI annotation which indicates presence of [no_exit](https://wiki.openstreetmap.org/wiki/Key:noexit) in a nearby location.                                                                                                    |    No    |
| 37  |        Railway        | A POI annotation which indicates presence of [railway](https://wiki.openstreetmap.org/wiki/Key:railway) in a nearby location.                                                                                                   |    No    |
| 38  |      Roundabout       | A POI annotation which indicates presence of [roundabout](https://wiki.openstreetmap.org/wiki/Tag:junction%3Droundabout) in a nearby location.                                                                                  |    No    |
| 39  |        Station        | A POI annotation which indicates presence of [station](https://wiki.openstreetmap.org/wiki/Key:station) in a nearby location.                                                                                                   |    No    |
| 40  |         Stop          | A POI annotation which indicates presence of [stop](https://wiki.openstreetmap.org/wiki/Key:stop) in a nearby location.                                                                                                         |    No    |
| 41  |    Traffic_Calming    | A POI annotation which indicates presence of [traffic_calming](https://wiki.openstreetmap.org/wiki/Key:traffic_calming) in a nearby location.                                                                                   |    No    |
| 42  |    Traffic_Signal     | A POI annotation which indicates presence of [traffic_signal](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dtraffic_signals) in a nearby loction.                                                                           |    No    |
| 43  |     Turning_Loop      | A POI annotation which indicates presence of [turning_loop](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dturning_loop) in a nearby location.                                                                               |    No    |
| 44  |    Sunrise_Sunset     | Shows the period of day (i.e. day or night) based on sunrise/sunset.                                                                                                                                                            |   Yes    |
| 45  |    Civil_Twilight     | Shows the period of day (i.e. day or night) based on [civil twilight](https://en.wikipedia.org/wiki/Twilight#Civil_twilight).                                                                                                   |   Yes    |
| 46  |   Nautical_Twilight   | Shows the period of day (i.e. day or night) based on [nautical twilight](https://en.wikipedia.org/wiki/Twilight#Nautical_twilight).                                                                                             |   Yes    |
| 47  | Astronomical_Twilight | Shows the period of day (i.e. day or night) based on [astronomical twilight](https://en.wikipedia.org/wiki/Twilight#Astronomical_twilight).                                                                                     |   Yes    |

```{r}
#| output: false
#| echo: false
library(dplyr)
library(arrow)
library(tidyverse)
library(sparklyr)
library(dbplot)
library(corrr)
library(plotly)
library(ROSE)
seed_num <- 1234
sc <- spark_connect(master = "local", version = "3.4.0")
```

# EDA

## Load accidents data in parquet format

```{r}
#| code-fold: true
# Reading Parquet
accidents <- spark_read_parquet(sc, path = "data/us_accidents")
glimpse(accidents)
```

## Distribution of Severity

```{r}
#| code-fold: true
grouped_severity <- accidents |>
  group_by(Severity) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
grouped_severity |> 
  mutate(Severity = as.factor(Severity), # Specify Severity to be factor (categorical)  
         Severity = reorder(Severity, desc(Count))) |> # Reorder in descending Count
  ggplot(aes(x = Severity, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) +
  theme_minimal() +
  labs(title = "Distribution of Accidents by Severity")
```

Majority of the accidents are of Severity 2.

## Number of Accidents by Time of Day

```{r}
#| code-fold: true
grouped_tod <- accidents |>
  group_by(TimeOfDay) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
grouped_tod |> 
  mutate(TimeOfDay = as.factor(TimeOfDay), # Specify TimeOfDay to be factor (categorical)  
         TimeOfDay = reorder(TimeOfDay, desc(Count))) |>  # Reorder in descending Count
  ggplot(aes(x = TimeOfDay, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accidents by Time of Day")
```

Surprisingly there are more accidents in the Afternoon, followed by the Morning.

## Distribution of Accidents by StartHr

```{r}
#| code-fold: true
grouped_startHr <- accidents |>
  group_by(StartHr) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
grouped_startHr |>
  mutate(StartHr = as_factor(StartHr),
    StartHr = reorder(StartHr, desc(Count))) |>  # Reorder in descending Count
  ggplot(aes(x = StartHr, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accidents by StartHr")
```

We can see that most of the accidents start around 3-5 p.m. in the afternoon. Surprisingly, very few accidents happen past midnight.

## Top 5 Weather Conditions

```{r}
#| code-fold: true
top_5_weather <- accidents |>
  group_by(Weather_Condition_New) |>
  summarise(Count = n()) |>
  slice_max(order_by = Count, n = 5, with_ties = FALSE) |>
  collect()

# Visualize with Spark
top_5_weather |> 
  mutate(Weather_Condition_New = as.factor(Weather_Condition_New),
         Weather_Condition_New = reorder(Weather_Condition_New, desc(Count))) |>
  ggplot(aes(x = Weather_Condition_New, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Top 5 Weather Conditions")
```

Most of the accidents seem to occur most when weather is fair, followed by cloudy weather. Thus, weather condition might not be a crucial factor in causing accidents.

## Explore the distribution of Visibility_Km

```{r}
#| code-fold: true
grouped_vis <- accidents |>
  group_by(Visibility_Km) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
grouped_vis |> 
  mutate(Visibility_Km = as.factor(Visibility_Km), # Specify Visibility_Km to be factor (categorical)  
         Visibility_Km = reorder(Visibility_Km, desc(Count))) |>  # Reorder in descending Count
  ggplot(aes(x = Visibility_Km, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accidents by Visibility_Km")
```

## Average Distance Affected Grouped by Severity

```{r}
#| code-fold: true
grouped_distance <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Distance_Km)) |>
  collect()

# Visualize with Spark
grouped_distance |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Distance Grouped by Severity", x = "Severity", y = "Average Distance (KM)")
```

## Average Humidity Grouped by Severity

```{r}
#| code-fold: true
grouped_humidity <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Humidity)) |>
  collect()

# Visualize with Spark
grouped_humidity |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Humidity Grouped by Severity", x = "Severity", y = "Humidity (%)")
```

## Average Pressure Grouped by Severity

```{r}
#| code-fold: true
grouped_pressure <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Pressure_Cm)) |>
  collect()

# Visualize with Spark
grouped_pressure |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Pressure Grouped by Severity", x = "Severity", y = "Pressure (CM)")
```

## Average Visibility Grouped by Severity

```{r}
#| code-fold: true
grouped_visibility <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Visibility_Km)) |>
  collect()

# Visualize with Spark
grouped_visibility |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Visibility Grouped by Severity", x = "Severity", y = "Visibility (KM)")
```

## Average Wind Speed Grouped by Severity

```{r}
#| code-fold: true
grouped_wind_speed <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Wind_Speed_KmPH)) |>
  collect()

# Visualize with Spark
grouped_wind_speed |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Wind Speed Grouped by Severity", x = "Severity", y = "Wind Speed (KmPH)")
```

## Average Precipitation Grouped by Severity

```{r}
#| code-fold: true
grouped_precipitation <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Precipitation_Cm)) |>
  collect()

# Visualize with Spark
grouped_precipitation |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Precipitation Grouped by Severity", x = "Severity", y = "Precipitation (CM)")
```

## Average Temperature Grouped by Severity

```{r}
#| code-fold: true
grouped_temp <- accidents |>
  group_by(Severity) |>
  summarise(Avg = mean(Temperature_C)) |>
  collect()

# Visualize with Spark
grouped_temp |>
  ggplot(aes(x = Severity, y = Avg, fill = !Severity %in% c(3, 4))) +
  geom_col() +
  theme_minimal() +
  scale_fill_discrete(name = "Severity", labels = c("Severe: 3 or 4", "Not Severe: 1 or 2")) + 
  labs(title = "Average Temperature Grouped by Severity", x = "Severity", y = "Temperature (C)")
```

## Distribution by Temperature during the accidents

```{r}
#| code-fold: true
dist_temp <- accidents |>
  group_by(Temperature_C) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
dist_temp |> 
  ggplot(aes(x = Temperature_C, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accident's Temperature")
```

## Accidents by Day of Week (descending)

```{r}
#| code-fold: true
grouped_DayOfWk <- accidents |>
  group_by(DayOfWk) |>
  summarise(Count = n()) |>
  collect()

# Descending order
grouped_DayOfWk$DayOfWk <- factor(grouped_DayOfWk$DayOfWk, levels = grouped_DayOfWk$DayOfWk[order(grouped_DayOfWk$Count, decreasing = TRUE)])

# Visualize with Spark
grouped_DayOfWk |> 
  ggplot(aes(x = DayOfWk, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accidents by Day of Week")
```

Most of the accidents seem to be happening during the weekdays, with fewest accidents on the weekends.

## Exploring the more severe accidents

```{r}
#| code-fold: true
severe_accidents <- accidents |>
  filter(Severity > 2)

# Time of day for severe accidents
grouped_tod <- severe_accidents |>
  group_by(TimeOfDay) |>
  summarise(Count = n()) |>
  collect()

grouped_tod |> 
  mutate(TimeOfDay = as.factor(TimeOfDay), # Specify TimeOfDay to be factor (categorical)  
         TimeOfDay = reorder(TimeOfDay, desc(Count))) |>  # Reorder in descending Count
  ggplot(aes(x = TimeOfDay, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Severe Accidents by Time of Day")

# Weather conditions for severe accidents
top_5_weather <- severe_accidents |>
  group_by(Weather_Condition_New) |>
  summarise(Count = n()) |>
  slice_max(order_by = Count, n = 5, with_ties = FALSE) |>
  collect()

top_5_weather |> 
  mutate(Weather_Condition_New = as.factor(Weather_Condition_New),
         Weather_Condition_New = reorder(Weather_Condition_New, desc(Count))) |>
  ggplot(aes(x = Weather_Condition_New, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() + 
  labs(title = "Top 5 Weather Conditions for Severe Accidents")

# Distribution of Visibility_Km
grouped_vis <- severe_accidents |>
  group_by(Visibility_Km) |>
  summarise(Count = n()) |>
  collect()

# Visualize with Spark
grouped_vis |> 
  mutate(Visibility_Km = as.factor(Visibility_Km), # Specify Visibility_Km to be factor (categorical)  
         Visibility_Km = reorder(Visibility_Km, desc(Count))) |>  # Reorder in descending Count
  ggplot(aes(x = Visibility_Km, y = Count)) +
  geom_col(fill = "deepskyblue4", width = 0.5) + 
  theme_minimal() +
  labs(title = "Distribution of Accidents by Visibility_Km for Severe Accidents")
```

Distribution of variables are similar despite filtering for more severe accidents.

## Crosstab of Day of Week and Time of Day

```{r}
#| code-fold: true
# Crosstab with DayOfWk and TimeOfDay
crosstab_Day_Time <- accidents |>
  sdf_crosstab("DayOfWk", "TimeOfDay")

crosstab_Day_Time
```

## Crosstab of Day of Week and Weather Condition

```{r}
#| code-fold: true
# Crosstab with Severity and Weather_Condition_New
crosstab_Severity_Weather <- accidents |>
  sdf_crosstab("DayOfWk", "Weather_Condition_New")

crosstab_Severity_Weather
```

## Crosstab of Severity and Amenity

```{r}
#| code-fold: true
# Crosstab with Severity and Amenity
crosstab_Severity_Amenity <- accidents |>
  sdf_crosstab("Severity", "Amenity")

data.frame(crosstab_Severity_Amenity) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Amenity) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Amenity, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Amenity", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Bump

```{r}
#| code-fold: true
# Crosstab with Severity and Bump
crosstab_Severity_Bump <- accidents |>
  sdf_crosstab("Severity", "Bump")

data.frame(crosstab_Severity_Bump) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Bump) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Bump, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Bump", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Crossing

```{r}
#| code-fold: true
# Crosstab with Severity and Crossing
crosstab_Severity_Crossing <- accidents |>
  sdf_crosstab("Severity", "Crossing")

data.frame(crosstab_Severity_Crossing) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Crossing) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Crossing, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Crossing", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Give_Way

```{r}
#| code-fold: true
# Crosstab with Severity and Give_Way
crosstab_Severity_Give_Way <- accidents |>
  sdf_crosstab("Severity", "Give_Way")

data.frame(crosstab_Severity_Give_Way) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Give_Way) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Give_Way, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Give Way", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Junction

```{r}
#| code-fold: true
# Crosstab with Severity and Junction
crosstab_Severity_Junction <- accidents |>
  sdf_crosstab("Severity", "Junction")

data.frame(crosstab_Severity_Junction) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Junction) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Junction, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Junction", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and No_Exit

```{r}
#| code-fold: true
# Crosstab with Severity and No_Exit
crosstab_Severity_No_Exit <- accidents |>
  sdf_crosstab("Severity", "No_Exit")

data.frame(crosstab_Severity_No_Exit) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_No_Exit) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_No_Exit, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x No_Exit", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Railway

```{r}
#| code-fold: true
# Crosstab with Severity and Railway
crosstab_Severity_Railway <- accidents |>
  sdf_crosstab("Severity", "Railway")

data.frame(crosstab_Severity_Railway) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Railway) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Railway, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Railway", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Station

```{r}
#| code-fold: true
# Crosstab with Severity and Station
crosstab_Severity_Station <- accidents |>
  sdf_crosstab("Severity", "Station")

data.frame(crosstab_Severity_Station) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Station) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Station, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Station", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Stop

```{r}
#| code-fold: true
# Crosstab with Severity and Stop
crosstab_Severity_Stop <- accidents |>
  sdf_crosstab("Severity", "Stop")

data.frame(crosstab_Severity_Stop) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Stop) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Stop, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Stop", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Traffic_Calming

```{r}
#| code-fold: true
# Crosstab with Severity and Traffic_Calming
crosstab_Severity_Traffic_Calming <- accidents |>
  sdf_crosstab("Severity", "Traffic_Calming")

data.frame(crosstab_Severity_Traffic_Calming) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Traffic_Calming) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Traffic_Calming, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Traffic Calming", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Traffic_Signal

```{r}
#| code-fold: true
# Crosstab with Severity and Traffic_Signal
crosstab_Severity_Traffic_Signal <- accidents |>
  sdf_crosstab("Severity", "Traffic_Signal")

data.frame(crosstab_Severity_Traffic_Signal) |>
  gather(key=condition, value = count, false, true) |>
  group_by(Severity_Traffic_Signal) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Traffic_Signal, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Traffic Signal", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Sunrise_Sunset

```{r}
#| code-fold: true
# Crosstab with Severity and Sunrise_Sunset
crosstab_Severity_Sunrise_Sunset <- accidents |>
  sdf_crosstab("Severity", "Sunrise_Sunset")

data.frame(crosstab_Severity_Sunrise_Sunset) |>
  gather(key=condition, value = count, Night, Day) |>
  group_by(Severity_Sunrise_Sunset) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Sunrise_Sunset, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Sunrise_Sunset", x = "Severity", y = "Proportion") +
  scale_fill_manual(values = c("Day" = "#FDA174", "Night" = "#40E0D0")) +
  theme_minimal()
```

## Crosstab of Severity and TimeOfDay

```{r}
#| code-fold: true
# Crosstab with Severity and TimeOfDay
crosstab_Severity_TimeOfDay <- accidents |>
  sdf_crosstab("Severity", "TimeOfDay")

data.frame(crosstab_Severity_TimeOfDay) |>
  gather(key=condition, value = count, Afternoon, Evening, Morning, Night) |>
  group_by(Severity_TimeOfDay) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_TimeOfDay, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Traffic TimeOfDay", x = "Severity", y = "Proportion") +
  theme_minimal()
```

## Crosstab of Severity and DayOfWk

```{r}
#| code-fold: true
# Crosstab with Severity and DayOfWk
crosstab_Severity_DayOfWk <- accidents |>
  sdf_crosstab("Severity", "DayOfWk")

data.frame(crosstab_Severity_DayOfWk) |>
  gather(key=condition, value = count, Mon, Tue, Wed, Thu, Fri, Sat, Sun) |>
  group_by(Severity_DayOfWk) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_DayOfWk, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Traffic DayOfWk", x = "Severity", y = "Proportion") +
  # scale_fill_manual(values = c("false" = "#FF9999", "true" = "99FF99")) +
  theme_minimal()
```

## Crosstab of Severity and Wind_Direction_New

```{r}
#| code-fold: true
# Crosstab with Severity and Wind_Direction_New
crosstab_Severity_Wind_Direction_New <- accidents |>
  sdf_crosstab("Severity", "Wind_Direction_New")

data.frame(crosstab_Severity_Wind_Direction_New) |>
  gather(key=condition, value = count, CALM, VAR, N, S, E, W) |>
  group_by(Severity_Wind_Direction_New) |>
  mutate(percentage = count / sum(count) * 100) |>
  ggplot(aes(x=Severity_Wind_Direction_New, y=percentage, fill=condition)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
  labs(title = "Severity x Wind_Direction_New", x = "Severity", y = "Proportion") +
  theme_minimal()
```

## Summary statistics for Numerical Columns in All Data

```{r}
#| code-fold: true
options(max.print = 100)
## getting columns that are numerical
numerical_col_names_accidents <- accidents |>
  select_if(is.numeric) |> colnames()

summary_stats <- accidents |>
  sdf_describe(cols = numerical_col_names_accidents)

summary_stats
```

## Correlation Matrix for Numerical Values

```{r}
#| code-fold: true
## getting columns that are numerical
numerical_cols_accidents <- accidents |>
  select_if(is.numeric)

cat_cols_accidents <- accidents |>
  select_if(negate(is.numeric))

numerical_cols_accidents |> 
  correlate(use = "pairwise.complete.obs", method = "pearson") |>
  shave(upper = TRUE) |>
  rplot()
```

There is little to no collinearity between predictors of accidents, aside from the high correlation between Wind_Chill_C and Temperature_C. Thus, we will only be keeping the column Temperature_C as it is more robust and easier to understand, whilst providing sufficient information.
