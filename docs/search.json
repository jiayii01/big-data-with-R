[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSA306 Group Project: Group 7",
    "section": "",
    "text": "We chose this"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#importing-packages",
    "href": "index.html#importing-packages",
    "title": "DSA306 Group Project: Group 7",
    "section": "IMPORTING PACKAGES",
    "text": "IMPORTING PACKAGES\n\nlibrary(dplyr)\nlibrary(arrow)\nlibrary(tidyverse)\nlibrary(sparklyr)\nlibrary(dbplot)\nlibrary(corrr)\nlibrary(plotly)\nlibrary(ROSE)\nseed_num &lt;- 1234\nsc &lt;- spark_connect(master = \"local\", version = \"3.4.0\")"
  },
  {
    "objectID": "index.html#eda",
    "href": "index.html#eda",
    "title": "DSA306 Group Project: Group 7",
    "section": "EDA",
    "text": "EDA\n\nLoad accidents data in parquet format\n\n# reading accidents data already made available in parquet data format\naccidents &lt;- spark_read_parquet(sc, path = \"data/us_accidents\")\nglimpse(accidents)\n\nRows: ??\n\n\nWarning in arrow_collect(object, ...): NAs introduced by coercion to integer\nrange\n\n\nColumns: 29\nDatabase: spark_connection\n$ Severity              &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ Distance_Mi           &lt;dbl&gt; 0.033, 0.025, 1.421, 0.168, 0.955, 0.863, 0.610,…\n$ State                 &lt;chr&gt; \"TX\", \"VA\", \"CA\", \"TX\", \"OR\", \"LA\", \"WV\", \"OH\", …\n$ Weather_Timestamp     &lt;dttm&gt; 2022-12-17 13:55:00, 2022-10-15 18:52:00, 2022-…\n$ Humidity              &lt;dbl&gt; 25, 45, 11, 55, 28, 61, 17, 62, 69, 51, 50, 29, …\n$ Pressure_In           &lt;dbl&gt; 28.85, 29.59, 29.40, 29.68, 29.86, 29.88, 29.29,…\n$ Visibility_Mi         &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, …\n$ Wind_Speed_Mph        &lt;dbl&gt; 5, 5, 17, 18, 5, 7, 5, 3, 10, 12, 12, 6, 8, 7, 6…\n$ Precipitation_In      &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ Amenity               &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Bump                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Crossing              &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, …\n$ Give_Way              &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Junction              &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, …\n$ No_Exit               &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Railway               &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Roundabout            &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Station               &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Stop                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Traffic_Calming       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ Traffic_Signal        &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, …\n$ Sunrise_Sunset        &lt;chr&gt; \"Day\", \"Day\", \"Day\", \"Day\", \"Day\", \"Day\", \"Day\",…\n$ StartHr               &lt;int&gt; 13, 18, 15, 17, 16, 12, 17, 21, 12, 15, 17, 13, …\n$ DayOfWk               &lt;chr&gt; \"Sat\", \"Sat\", \"Fri\", \"Thu\", \"Mon\", \"Wed\", \"Wed\",…\n$ Duration              &lt;drtn&gt; 25199 secs, 4502 secs, 7372 secs, 7955 secs, 17…\n$ Temperature_C         &lt;dbl&gt; 12.2, 20.0, 20.6, 30.6, 31.7, 9.4, 19.4, 25.0, 2…\n$ Wind_Chill_C          &lt;dbl&gt; 12.2, 20.0, 20.6, 30.6, 31.7, 7.8, 19.4, 25.0, 2…\n$ TimeOfDay             &lt;chr&gt; \"Afternoon\", \"Evening\", \"Afternoon\", \"Afternoon\"…\n$ Weather_Condition_New &lt;chr&gt; \"Fair\", \"Fair\", \"Fair\", \"Cloudy\", \"Fair\", \"Fair\"…\n\n\n\n\nDistribution of accidents by State\n\n## Distribution of accidents by State\ngrouped_state &lt;- accidents |&gt;\n  group_by(State) |&gt;\n  summarise(Count = n()) |&gt;\n  mutate(Count = as.numeric(Count)) |&gt;\n  arrange(desc(Count)) |&gt;\n  head(10) |&gt;\n  collect()\n\n# Visualize with Spark\ngrouped_state |&gt; \n  ggplot(aes(reorder(State, (Count)), Count)) +\n  geom_col(fill = \"deepskyblue4\", width = 0.5) +\n  labs(title = \"Top 10 States with Most Accidents\") + \n  ylab(\"State\") +\n  coord_flip()"
  },
  {
    "objectID": "model.html#importing-packages",
    "href": "model.html#importing-packages",
    "title": "Accidents Prediction",
    "section": "IMPORTING PACKAGES",
    "text": "IMPORTING PACKAGES\n\n\n\nDistance (Mi)\n\n\n\n\n\nHumidity\n\n\n\n\n\nPressure (In)\n\n\n\n\n\nVisibility (Mi)\n\n\n\n\n\nWind Speed (MPH)\n\n\n\n\n\nPrecipitation (In)\n\n\n\n\n\nStart Hour\n\n\n\n\n\nTemperature (C)\n\n\n\n\n\nAmenity\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nBump\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nCrossing\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nGive Way\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nJunction\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nNo Exit\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nRailway\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nStation\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nStop\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nTraffic Signal\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nSunrise_Sunset\n\n\n\n\nTRUE\n\n\n\n\n\nFALSE\n\n\n\n\n\n\n\nDay of Week\n\nMon\nTues\nWed\nThu\nFri\nSat\nSun\n\n\n\n\n\n\nTime of Day\n\nMorning\nAfternoon\nEvening\nNight\n\n\n\n\n\n\nWeather Condition\n\nFair\nCloudy\nHeavy Rain\nRainy\nWindy\nHeavy Snow\nSnow\nFog/Haze/Smoke/Mist\nFreezing Rain\nHail/Dust/Sand/Tornado\n\n\n\n\n\nSubmit\n\n\n\n\n\n\n\nStatus/Output"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Accidents Prediction",
    "section": "",
    "text": "# #| label: load-packages\n# #| include: false\n# library(shiny)\n# library(httr)\n# #| panel: sidebar\n# HTML(\"&lt;h3&gt;Input parameters&lt;/h4&gt;\")\n# sliderInput(\"Distance_Mi\", label = \"Distance (Mi)\", value = 1.04092843, min = 0.002, max = 336.570007)\n# sliderInput(\"Humidity\", label = \"Humidity\", value = 61.6816, min = 1.0, max = 100.0)\n# sliderInput(\"Pressure_In\", label = \"Pressure (In)\", value = 29.3758623, min = 0.0, max = 58.63)\n# sliderInput(\"Visibility_Mi\", label = \"Visibility (Mi)\", value = 9.1585846961, min = 0.0, max = 90.0)\n# sliderInput(\"Wind_Speed_Mph\", label = \"Wind Speed (MPH)\", value = 7.74101097781, min = 0.0, max = 190.0)\n# sliderInput(\"Precipitation_In\", label = \"Precipitation (In)\", value = 0.0054714150478, min = 0.0, max = 3.0)\n# sliderInput(\"StartHr\", label = \"Start Hour\", value = 13, min = 0, max = 23)\n# sliderInput(\"Temperature_C\", label = \"Temperature (C)\", value = 17.371791908, min = -42.8, max = 77.8)\n# \n# radioButtons(\"Amenity\", label=\"Amenity\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Bump\", label=\"Bump\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Crossing\", label=\"Crossing\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Give_Way\", label=\"Give Way\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Junction\", label=\"Junction\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"No_Exit\", label=\"No Exit\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Railway\", label=\"Railway\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Station\", label=\"Station\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Stop\", label=\"Stop\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Traffic_Signal\", label=\"Traffic Signal\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# radioButtons(\"Sunrise_Sunset\", label=\"Sunrise_Sunset\", choices = c(\"TRUE\" = TRUE, \"FALSE\" = FALSE))\n# \n# selectInput(\"DayOfWk\", label=\"Day of Week\", choices = c(\"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"))\n# selectInput(\"TimeOfDay\", label=\"Time of Day\", choices = c(\"Morning\", \"Afternoon\", \"Evening\", \"Night\"))\n# selectInput(\"Weather_Condition_New\", label=\"Weather Condition\", choices = c(\"Fair\", \"Cloudy\", \"Heavy Rain\", \"Rainy\", \"Windy\", \"Heavy Snow\", \"Snow\", \"Fog/Haze/Smoke/Mist\", \"Freezing Rain\", \"Hail/Dust/Sand/Tornado\"))\n# \n# actionButton(\"submitbutton\", \"Submit\", class = \"btn btn-primary\")\n# #| panel: fill\n# tags$label(h3('Status/Output'))\n# verbatimTextOutput('contents')\n# h2(textOutput(\"output_text\"))\n# #| context: server\n# observeEvent(input$submitbutton, {\n# \n#     # Create a request body\n#     request_body &lt;- list(Distance_Mi = input$Distance_Mi,\n#                          Humidity = input$Humidity,\n#                          Pressure_In = input$Pressure_In,\n#                          Visibility_Mi = input$Visibility_Mi,\n#                          Wind_Speed_Mph = input$Wind_Speed_Mph,\n#                          Precipitation_In = input$Precipitation_In,\n#                          StartHr = input$StartHr,\n#                          Temperature_C = input$Temperature_C,\n#                          Amenity = input$Amenity,\n#                          Bump = input$Bump,\n#                          Crossing = input$Crossing,\n#                          Give_Way = input$Give_Way,\n#                          Junction = input$Junction,\n#                          No_Exit = input$No_Exit,\n#                          Railway = input$Railway,\n#                          Station = input$Station,\n#                          Stop = input$Stop,\n#                          Traffic_Signal = input$Traffic_Signal,\n#                          Sunrise_Sunset = input$Sunrise_Sunset,\n#                          DayOfWk = input$DayOfWk,\n#                          TimeOfDay = input$TimeOfDay,\n#                          Weather_Condition_New = input$Weather_Condition_New)\n# \n#     # Make POST request to the API\n#     response &lt;- POST(url = \"http://127.0.0.1:8000/predict\", body = request_body, encode = \"json\")\n# \n#     # Extract and display API response\n#     api_result &lt;- content(response, \"text\")\n#     output$output_text &lt;- renderText({\n#       if (input$submitbutton&gt;0) {\n#         ans &lt;- \"\"\n#         if (api_result == 0){\n#           ans &lt;- \"Not Severe\"\n#         } else{\n#           ans &lt;- \"Severe\"\n#         }\n#         paste(\"This accident is\", ans)\n#       }\n#     })\n# \n#     # Status/Output Text Box\n#   output$contents &lt;- renderPrint({\n#     if (input$submitbutton&gt;0) {\n#       isolate(\"Prediction complete.\")\n#     } else {\n#       return(\"Server is ready for prediction.\")\n#     }\n#   })\n# })"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Old Faithful",
    "section": "",
    "text": "Number of bins:"
  },
  {
    "objectID": "index.html#project-introduction",
    "href": "index.html#project-introduction",
    "title": "DSA306 Group Project: Group 7",
    "section": "",
    "text": "We chose this"
  }
]